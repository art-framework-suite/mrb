#!/usr/bin/env perl
# -*- cperl -*-

use 5.016;
use strict;
use warnings FATAL => qw(io regexp severe syntax uninitialized void);

##
use FindBin qw();

my $_libexec;


BEGIN {
  $_libexec = $FindBin::RealBin;
}

use lib $_libexec;

##
use Cetmodules qw();
use Cetmodules::Util qw(error_exit info is_ups_version notify parse_version_string to_cmake_version to_ups_version to_version_string verbose);
use Cetmodules::CMake qw(@PROJECT_KEYWORDS process_cmake_file);
use Cetmodules::CMake::Util qw(is_comment);
use Cetmodules::UPS::ProductDeps qw(get_parent_info);
use Cetmodules::UPS::Setup qw(get_cmake_project_info);
use Cwd qw(abs_path);
use File::Basename qw(dirname);
use IO::File qw();
use IO::Handle qw();
use File::Spec qw();
use List::MoreUtils qw();
##
use warnings FATAL => qw(Cetmodules);

# Parse and update a product's version in Cmake_File.txt.
if( $#ARGV < 3 ) {
    print "\n";
    print "ERROR: unspecified parameters - only have $#ARGV \n";
    print "USAGE: edit_cmake <file> <product> <version> <dryrun:yes|no>\n";
    exit 1;
}

my $cmfile = $ARGV[0];
my $product = $ARGV[1];

error_exit("ill-formed new version: $ARGV[2]")
  unless $ARGV[2] =~ m&^(?<quote>["']?)(?<ver>.*)\g{quote}$&;
my $new_ups_version = $+{ver};
my $new_version = parse_version_string($+{ver});
my $version_quote = $+{quote} ? '"' : '';
my $ups_version = to_ups_version($new_version);
my $ups_version_mismatch = ($new_ups_version =~ m&\Av[0-9]&msx and $new_ups_version ne $ups_version);
my $cmake_version = to_cmake_version($new_version);
my $version_string = to_version_string($new_version);
my $new_version_quoted = "$version_quote$version_string$version_quote";
my $dryrun = ($ARGV[3] // '') =~ m&^(y(?:es)?|1|t(?:rue))&i;
my $cmfilenew = $dryrun ? '' : "$cmfile.new";
my $cmdir = dirname($cmfile);
my $project_function_keywords =
  '^(?:DESCRIPTION|HOMEPAGE_URL|LANGUAGES|VERSION)$';
my $pinfo_file = abs_path(File::Spec->catfile($cmdir, 'ups', 'product_deps'));
my $need_version_string_var = $new_version->{extra} ? 1 : 0;

# Info from this Cmake_File.txt file.
my ($process_cmfile, $pv_prefix, $cpi);
if (defined $pinfo_file and -e $pinfo_file) {
  $cpi = get_cmake_project_info($cmdir, (quiet_warnings => 1)) || {};
  $pv_prefix = (($cpi->{cmake_project_name} // '') =~ m&^[A-Za-z_][0-9A-Za-z_-]*$&) ?
  $cpi->{cmake_project_name} : '${PROJECT_NAME}';
  # Is this the UPS product we're interested in?
  my $pinfo = get_parent_info($pinfo_file, (quiet_warnings => 1));
  if ($product eq $pinfo->{name}) { # Yes.
    $ups_version_mismatch
      and error_exit("refusing to update version info for $product due to non-standard new version ($new_ups_version vs $ups_version)");
    my $old_version = $cpi->{CMAKE_PROJECT_VERSION_STRING} // $cpi->{version_info} // undef;
    $old_version =~ s&^(?P<quote>["']?)(?P<ver>.*)\k<quote>$&$+{ver}& if $old_version;
    if (not defined $old_version or
        $version_string ne to_version_string($old_version)) { # Need to update.
      (exists $cpi->{CMAKE_PROJECT_VERSION_STRING}
       or $cpi->{EXTENDED_VERSION_SEMANTICS}
       or $cpi->{VERSION_FILE})
        and $need_version_string_var = 1;
      if ($cpi->{VERSION_FILE}) {
        $process_cmfile = 3;
      } else {
        $process_cmfile = 1;
      }
    }
  }
} else {
  $process_cmfile = 2;
}

my $changed;
my $seen_functions = {};

if ($process_cmfile) {
  if ($dryrun) {
    notify("[DRY_RUN] these changes would have been made:\n\n");
  } else {
    info("writing $cmfile to $cmfilenew\n\n");
  }
  if ($process_cmfile == 3) {
    if ($dryrun) {
      notify("[DRY_RUN] would have updated $product to $version_string in $cpi->{VERSION_FILE}");
    } else {
      my $fh = IO::File->new($cpi->{VERSION_FILE}, q(>));
      $fh->printf("$version_string");
      $fh->close();
    }
  }

  my ($func, @callbacks) = ($process_cmfile == 2)
    ? ( \&_update_distribution_variables,
        qw(create_product_variables create_version_variables) )
    : ( \&_update_project_version, qw(cet_cmake_env project set) );
  my $options =
    { $dryrun ? ("dry-run" => 1) : (output => $cmfilenew),
      map { ( "${_}_cmd" => $func ); }
      @callbacks };
  my ($results, $status) = process_cmake_file($cmfile, $options);
  $changed = keys %$status;
}

if ($changed) {
  if ($dryrun) {
    notify(sprintf("[DRY_RUN] would have made $changed edit%s to $cmfile\n",
                   ($changed != 1) ? 's' : ''));
  } else {
    rename($cmfile, "$cmfile.bak") or error_exit("failed to save backup $cmfile.bak ($!)");
    rename($cmfilenew, $cmfile) or error_exit("failed to install $cmfilenew as $cmfile ($!)");
    info(sprintf("made $changed edit%s to $cmfile\n",
                 ($changed != 1) ? 's' : ''));
    my $colordiff = (system("type -t colordiff >/dev/null 2>&1") == 0) ? ' | colordiff' : '';
    verbose(`diff -u "$cmfile.bak" "$cmfile"$colordiff`);
  }
} else {
  info(sprintf("%sno changes necessary to $cmfile%s",
               ($dryrun) ? "[DRY_RUN] " : '',
               ($cmfilenew and -e $cmfilenew) ? '' : ": removing $cmfilenew"));
  unlink $cmfilenew if -e $cmfilenew;
}

1;

sub _update_distribution_variables {
  my ($cmd_infos, $cmd_info, $cmake_file, $options) = @_;
  $cmd_info->interpolated_arg_at(0) eq $product or return;
  my $newver = $ups_version_mismatch ? $new_ups_version : $ups_version;
  if ($cmd_info->has_keyword('LIST')) {
    $cmd_info->insert_args_at($cmd_info->keyword_arg_append_position(qw(LIST NAME NOP QUALIFIERS)), $newver);
  } else { # insert or replace
    my @all_idx_idx = $cmd_info->all_idx_idx();
    my $replace = List::MoreUtils::first_value {
      my $idx = $_;
      is_ups_version(scalar $cmd_info->interpolated_arg_at($_));
    } @all_idx_idx;
    if (defined $replace) {
      # Replace the version with our new one, preserving any variable suffix.
      my @separated = $cmd_info->arg_at($replace);
      my $old = $separated[(scalar @separated > 1) ? 1 : 0];
      my ($suffix) = ($old =~ m&(\$\{[^}]*\}.*)\z&msx);
      defined $suffix or $suffix = q();
      $cmd_info->replace_arg_at($replace, "$newver$suffix");
    } else {
      $cmd_info->add_args_after(0, $newver);
    }
  }
  return;
}


sub _update_project_version {
  my ($cmd_infos, $cmd_info, $cmake_file, $options) = @_;
  # Interesting calls must all occur before cet_cmake_env().
  $seen_functions->{cet_cmake_env} and return;

  if ($cmd_info->{name} eq 'cet_cmake_env') {
    ++$seen_functions->{cet_cmake_env};
    # If we need to set ${PROJECT_NAME}_CMAKE_PROJECT_VERSION_STRING and we
    # haven't seen one, add the set() call here.
    if ($need_version_string_var and
        $seen_functions->{project} and
        not ($seen_functions->{CMAKE_PROJECT_VERSION_STRING} or
             $cpi->{VERSION_FILE})) {
      unshift @$cmd_infos,
        sprintf(<<'EOF',
%sset(${PROJECT_NAME}_CMAKE_PROJECT_VERSION_STRING%s)
EOF
                $cmd_info->{pre_cmd_ws},
                ($new_version_quoted ne q()) ? " $new_version_quoted" : q());
      ++$seen_functions->{CMAKE_PROJECT_VERSION_STRING};
    }
  } elsif (not $seen_functions->{project} and
           $cmd_info->{name} eq 'project') {
    # We've already verified the product matches from ups/product_deps
    # upstream, so we're only making the assumption (!) that the first
    # project() call is the good one.
    ++$seen_functions->{project};
    # Insert LANGUAGES if this is an old-style project() invocation..
    $cmd_info->n_args() > 1
      and List::MoreUtils::none { $cmd_info->has_keyword($_); } @PROJECT_KEYWORDS
      and $cmd_info->add_args_after(0, 'LANGUAGES');
    # Remove any existing VERSION keyword.
    $cmd_info->remove_single_valued_keyword('VERSION', @PROJECT_KEYWORDS);
    # Add in our new one if this is the appropriate place.
    $need_version_string_var or
      $cmd_info->add_args_after(0, 'VERSION', $new_version_quoted);
  } elsif ($cmd_info->{name} eq 'set') {
    local $_; ## no critic qw(Variables::RequireInitializationForLocalVars)
    given ($cmd_info->interpolated_arg_at(0)) {
      when (m&\A.*_CMAKE_PROJECT_VERSION_STRING\z&msx) { # Found one.
        if ($seen_functions->{CMAKE_PROJECT_VERSION_STRING}++) {
          # Already did this bit.
          @$cmd_infos = ();
        } else {
          # Replace with a new call, preserving a suffix variable if
          # appropriate:
          my $replace = 1;
          my @separated = $cmd_info->arg_at($replace);
          my $suffix;
          if (my $old = $separated[(scalar @separated > 1) ? 1 : 0]) {
            ($suffix) = ($old =~ m&(\$\{[^}]*\}.*)\z&msx);
            if (defined $suffix) {
              $need_version_string_var |= 1;
            } else {
              $suffix = q();
            }
          } else {
            $suffix = q();
          }
          $cmd_info->replace_arg_at($replace,
                                    "$version_quote$version_string$suffix$version_quote");
        }
      }
      when (m&(?:\A|_)(EXTENDED_VERSION_SEMANTICS)\z&msx) {
        ++$seen_functions->{$1};
      }
      default { }
    }
  } else { # Nothing to do.
  }
  return;
}
