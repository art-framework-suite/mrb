#!/usr/bin/env perl
# -*- cperl -*-
########################################################################
# setup_products
#
#   Set up products for the build environment.
#
# * Invoked by mrbsetenv.
#
########################################################################

use 5.016;
use strict;
use warnings FATAL => qw(io regexp severe syntax uninitialized void);

##
use Cwd qw(abs_path chdir getcwd);
use File::Spec qw();
use FindBin qw();
use List::Util qw();

my ($_libexec, $_failscript);


BEGIN {
  $_libexec = $FindBin::RealBin;
  $_failscript = abs_path(File::Spec->catfile($_libexec, 'fail'));
}

use lib $_libexec;

##
use Cetmodules qw();
use Cetmodules::CMake qw(get_CMakeLists_hash);
use Cetmodules::CMake::Presets qw(project_preset_data resolve_reference);
use Cetmodules::CMake::Presets::Util qw(is_project_variable);
use Cetmodules::Util qw(error_exit shortest_unique_prefix version_cmp version_sort);
use Cetmodules::UPS::ProductDeps qw($BTYPE_TABLE get_product_list get_parent_info get_qualifier_matrix sort_qual);
use Cetmodules::UPS::Setup qw(cetpkg_info_file classify_deps compiler_for_quals deps_for_quals get_derived_parent_data print_dep_setup print_dep_setup_one print_dev_setup ups_to_cmake write_table_deps write_table_frag);
use File::Basename qw(basename);
use File::Path qw(make_path);
use IO::File qw();
use IO::Handle qw();
use POSIX qw(uname);

##
use warnings FATAL => qw(Cetmodules);

END { print "$_failscript\n" if ($?); }

my $max_resolution_loops = 200;
my $min_cetm_version = '@MRB_MIN_CETMODULES_VERSION@';
my $min_cetm_module_plugins_version = '2.24.00';
my $min_cetb_version = '@cetmodules_MIN_CETBUILDTOOLS_VERSION@';

sub reconcile_cmake_args {
  my ($all_packages, @products) = @_;
  my $results = { map { map { m&\A-D(?:CET_PV_PREFIX|WANT_UPS|CMAKE_BUILD_TYPE)(?::[^=]+)=&msx ? () : ($_ => 1); } @{$all_packages->{$_}->{cmake_args}}; } @products };
  my @results = sort keys %$results;
  return \@results;
}

sub reconcile_compiler {
  my $cop_info = shift;
  my $compilers = {};
  foreach my $key (keys %$cop_info) {
    exists $cop_info->{$key}->{compiler} and
      $cop_info->{$key}->{compiler}
        and push @{$compilers->{$cop_info->{$key}->{compiler}}}, $key;
  }
  error_exit("inconsistent compilers reported across packages:\n",
             to_string($compilers))
    if (scalar keys %{$compilers} > 1);
  return (keys %{$compilers})[0];
}

sub reconcile_dep_quals {
  # Enforce matching qualifiers while reconciling dupes.
  my ($phash) = @_;
  my $result = { };
  foreach my $prod (keys %{$phash}) {
    foreach my $dep (keys %{$phash->{$prod}}) {
      my $incoming = $phash->{$prod}->{$dep};
      if (exists $result->{$dep}->{$phash->{$prod}->{$dep}->{version}}) {
        # Merge entries.
        my $existing = $result->{$dep}->{$phash->{$prod}->{$dep}->{version}};
        # Only allow missing qualifier for only_for_build deps.
        $existing->{qualspec} = $incoming->{qualspec} if $incoming->{qualspec};
        if ($existing->{qualspec} ne $incoming->{qualspec}) {
          error_exit("Qualifiers for dependency $dep are inconsistent between product_deps for packages\n",
                     "$existing->{origin} ($existing->{qualspec}) and $prod ($incoming->{qualspec}).");
        }
        # Only only_for_build if everyone agrees.
        delete $existing->{only_for_build} unless $incoming->{only_for_build};
        # Only optional if everyone agrees.
        delete $existing->{optional} unless $incoming->{optional};
      } else {
        # New entry.
        $result->{$dep}->{$phash->{$prod}->{$dep}->{version}} = $incoming;
        # Record origin product for which this is a dependency.
        $result->{$dep}->{$phash->{$prod}->{$dep}->{version}}->{origin} = $prod;
      }
    }
  }
  return $result;
}

sub reconcile_deps {
  my ($setup_products_hash) = @_;
  my $product_phashes = { map { ($_ => $setup_products_hash->{$_}->{phash}); }
                          keys %{$setup_products_hash} };
  return reconcile_dep_quals($product_phashes);
}

sub get_package_list {
  my ($cml) = @_;
  my @plist = ();
  open(my $in, "<", "$cml") or error_exit("couldn't open $cml");
  while (<$in>) {
    chomp;
    m&^\s*(?i:(?:mrb_)?add_subdirectory)\s*\(\s*([^\s)]+)& and push @plist, ${1};
  }
  close($in);
  return (@plist);
}

sub latest_version {
  my @result = sort version_sort @_;
  return pop @result;
}

sub order_products {
  my ($setup_products_hash, $checked_out_products) = @_;
  # Construct compact dependency information, required for ordering.
  foreach my $pkg (keys %{$checked_out_products}) {
    $checked_out_products->{$pkg}->{uses} =
      [ grep { my $dep = $_; grep { $_ eq $dep; } keys %{$checked_out_products}; }
        keys %{$setup_products_hash->{$pkg}->{phash}} ];
  }

  # Order the checked-out products by iteration:
  #
  # 1. Pull out those products which are not used by those remaining in
  #    the list.
  #
  # 2. Top level products are pulled out first and have the highest order
  #    number (0).
  #
  # 3. The order number is decremented with each successive iteration.
  #
  # 4. Products pulled out in the same iteration have the same order
  #    number, as they do not depend on each other. Their relative order
  #    when the keys are sorted according to order number is therefore
  #    arbitrary.
  my $ordered_products = {};
  my $iloop = 0;
  for (;
       scalar keys %{$checked_out_products} and
       $iloop < $max_resolution_loops;
       ++$iloop) {
    my @all_uses = map { @{$checked_out_products->{$_}->{uses}}; } sort keys %{$checked_out_products};
    for my $unused (grep { my $pkg = $_; not grep  { $_ eq $pkg; } @all_uses; }
                    sort keys%{$checked_out_products}) {
      $ordered_products->{$unused} = delete $checked_out_products->{$unused};
      $ordered_products->{$unused}->{order} = -$iloop;
    }
  }

  # cetmodules should always be first.
  exists $ordered_products->{cetmodules} and
    $ordered_products->{cetmodules}->{order} = -$iloop;
  scalar keys %{$checked_out_products} and
    error_exit("Circular dependency issue within package set:\n",
               join(", ", sort keys %{$checked_out_products}));

  return $ordered_products;
}

sub find_at_least {
  my ($pkg, $vmin) = @_;
  my $found_version =
    $ENV{sprintf('%s_UPS_VERSION', uc($pkg))} ||
    $ENV{sprintf('%s_VERSION', uc($pkg))} || undef;
  if (not $found_version or version_cmp("$vmin", $found_version) > 0) {
    open(my $fh, "-|", "ups list -aK+ $pkg") or
      error_exit("unable to get list of available $pkg products from UPS");
    $found_version =
      latest_version(map { chomp; my @bits = split; eval $bits[1] or (); }
                     <$fh>);
    close($fh);
  }
  if (not $found_version) {
    print STDERR "FAILED\n";
    error_exit("unable to find available UPS packages for $pkg in $ENV{PRODUCTS}");
  } elsif (version_cmp("$vmin", $found_version) > 0) {
    print STDERR "FAILED\n";
    error_exit("mrb $ENV{MRB_VERSION} needs at least $pkg version $vmin");
  }
  return $found_version;
}


sub reconstitute_cmake_args {
  my ($preset_data) = @_;
  my %cacheVars = map { %{$_}; } reverse resolve_presets_for(
    resolve_reference($preset_data, 'configurePresets'), 'for_UPS');
  return [ map { definition_for($_, $cacheVars{$_}); } sort keys %cacheVars ];
}


sub resolve_presets_for {
  my ($preset_data, $preset) = @_;
  my $selected_preset_data =
    resolve_reference($preset_data, $preset) // return ();
  my $inherits = resolve_reference($selected_preset_data, 'inherits') // [];
  return (resolve_reference($selected_preset_data, 'cacheVariables') // (),
          map { resolve_presets_for($preset_data, $_); }
          (ref($inherits) eq 'ARRAY') ? @{$inherits} : ($inherits));
}


sub definition_for {
  my ($var, $val) = @_;
  defined $val or return q();
  is_project_variable($val) and return $val->definition;
  ref($val) eq 'HASH' and return
    sprintf("-D$var%s=%s",
            $val->{'type'} ? ":$val->{'type'}" : q(),
            (($val->{'type'} // q()) eq 'BOOL')
            ? (($val->{'value'} =~ m&\A(?:\0|0|OFF|NO|FALSE|N|IGNORE|(?:.*-)?NOTFOUND)?\z&imsx) ? 'OFF' : 'ON')
            : $val->{'value'});
  ref($val) or return "-D$var=$val";
  error_exit("unable to reconstruct CMake definition for \"$var=$val\"");
}

if ($#ARGV < 1) {
  error_exit("directories not specified\n",
             "USAGE: setup_products <input-directory> <build-directory>");
}

my $sourcedir = shift;
my $builddir = shift;
my $mrb_project = $ENV{MRB_PROJECT};
my $mrb_project_version = $ENV{MRB_PROJECT_VERSION};
my @mrb_quals_sorted;
my $mrb_quals = sort_qual (\@mrb_quals_sorted, $ENV{MRB_QUALS});

my $tmpfl = File::Spec->catfile($builddir, "$mrb_project-$mrb_project_version");
open(my $tfh, "+>", $tmpfl) or
  error_exit("couldn't open $tmpfl for write");

my $cmakefile=File::Spec->catfile($sourcedir, "CMakeLists.txt");

my @package_list = get_package_list($cmakefile);
unless (scalar @package_list) {
  print STDERR "DIAGNOSTICS: there are no packages in $sourcedir\n";
  print STDERR "DIAGNOSTICS: nothing to build\n";
  print "$tmpfl\n";
  exit 0;
}

my $simple = (not $mrb_quals or
              $mrb_quals eq '-nq-' or
              grep { $_ eq "simple"; } @ARGV);

my $build_type;
($build_type) =
  map { $mrb_quals_sorted[$#mrb_quals_sorted] eq $_ ? $BTYPE_TABLE->{$_} : (); }
  qw(debug opt prof) if (scalar @mrb_quals_sorted and not $simple);


# Initialize omnibus data structure.
my $all_packages = {};

my $compiler = compiler_for_quals({}, $mrb_quals);

foreach my $pkg (@package_list) {
  # Obtain all the information for this package.
  my $pfile = File::Spec->catfile($sourcedir, $pkg, "ups", "product_deps");
  my $phash = get_product_list($pfile);
  my ($qlen, $qhash, $qqhash) = get_qualifier_matrix($pfile);
  # Load it all into the master hash.
  $all_packages->{$pkg} =
    { %{get_parent_info($pfile,
                        (grep { $_ eq 'cetbuildtools' } keys %$phash) ?
                        (quiet_warnings => 1) : ())},
      map { eval "$_ => \$$_"; } qw(phash qlen qhash qqhash) };
}

# We have all the dependency information. Next, resolve the dependency
# matrix to ascertain the correct qualifiers for each product.
my $setup_products_hash = {};

# We will assume that $mrb_quals applies to $mrb_project, if that is a
# package, and any package not mentioned in the dependency tree of any
# other package. Note that we do *not* use UPS to fill in gaps.
my $npkgs = scalar @package_list;
foreach my $pkg (keys %{$all_packages}) {
  my $product_info = $all_packages->{$pkg};
  my $qqhash = $product_info->{qqhash} || undef;
  if (($pkg eq $mrb_project and $qqhash) # Eponymous with the MRB project.
      or not grep { grep { $_ eq $pkg } keys %{$all_packages->{$_}->{qhash}} }
      keys %{$all_packages}) { # Not a dependency of any other package.
    if ($product_info->{no_fq_dir}) {
      $setup_products_hash->{$pkg} =
        { qualspec => '',
          phash => deps_for_quals($product_info->{pfile},
                                  $product_info->{phash},
                                  $product_info->{qhash},
                                  ''),
          qhash => $qqhash->{''} || {}
        };
    } else {
      my $pkg_quals = List::Util::first { exists $qqhash->{$_}; } $mrb_quals, q();
      if (defined $pkg_quals) { # We have an entry.
        $setup_products_hash->{$pkg} =
          { qualspec => $pkg_quals,
            phash => deps_for_quals($product_info->{pfile},
                                    $product_info->{phash},
                                    $product_info->{qhash},
                                    $pkg_quals),
            qhash => $qqhash->{$pkg_quals} || {}
          };
      } else {
        error_exit("product $pkg must have an entry in qualifier_list corresponding to\n",
                   "specified MRB_QUALS ${mrb_quals}, or a dependent package that does."
                  );
      }
    }
  }
}

# Look for each unresolved package in the correct qualifier row for
# packages we've already resolved, or in the qualifier-filtered
# product_list of same if we find it listed as an only_for_build
# product.
for (my $iloop = 0;
     $npkgs > scalar keys %{$setup_products_hash} and
     $iloop < $max_resolution_loops;
     ++$iloop) {
  for my $pkg (grep {not exists $setup_products_hash->{$_}; } @package_list) {
    # For each remaining unresolved package, attempt to find it in the
    # dependencies of packages we've already dealt with for the current
    # qualifiers.
    my $found_in_deps =
      { map { my $result = $setup_products_hash->{$_}->{qhash}->{$pkg} //
                ((exists $setup_products_hash->{$_}->{phash}->{$pkg} and
                 $setup_products_hash->{$_}->{phash}->{$pkg}->{only_for_build}) ?
                   '' : undef);
              if (not defined $result or $result eq '-') {
                ();
              } else {
                ( $_ => { qualspec => ($result =~ m&^-(b|nq)-$&) ? '' : $result } );
              }
            } keys %{$setup_products_hash} };
    if (scalar keys %{$found_in_deps}) {
      # Check for an unambiguous qualifier.
      my $quals = { map { ($found_in_deps->{$_}->{qualspec} => 1); } keys %{$found_in_deps} };
      scalar keys %{$quals} > 1 and
        error_exit(sprintf("could not ascertain unambiguous qualifier (\%s) for package $pkg from",
                           join(", ", sort keys %{$quals})),
                   sprintf("\ndependency information found in packages \%s",
                           join(", ", keys %{$found_in_deps})),
                   "\nwith MRB_QUALS=$mrb_quals."
                   );
      # Find the lowest level in the dependency tree.
      my $found_dep_info = (keys %{$found_in_deps})[0];
      my ($qual) = ($found_in_deps->{$found_dep_info}->{qualspec});
      my $product_info = $all_packages->{$pkg};
      if (exists $product_info->{qqhash}->{$qual}) {
        $setup_products_hash->{$pkg} =
          { qualspec => $qual,
            phash => deps_for_quals($product_info->{pfile},
                                    $product_info->{phash},
                                    $product_info->{qhash},
                                    $qual),
            qhash => $product_info->{qqhash}->{$qual}
          };
      } else {
        error_exit("could not find information for qualifier $qual of package $pkg");
      }
    } else {
      next;
    }
  }
}

# Check we resolved everything.
$npkgs > scalar keys %{$setup_products_hash} and
  error_exit("exceeded loop limit ($max_resolution_loops) attempting to resolve qualifiers for packages.",
             sprintf("\nUnresolved packages: %s",
                     join(", ", (grep { not exists $setup_products_hash->{$_}; } @package_list))));

my $srcbase = basename($sourcedir);
my $inputdir;
if ( $srcbase eq "ups" ) {
  $inputdir = $sourcedir;
  error_exit("you have an old copy of setup_for_development\n",
             "please issue the following command\n",
             "  cp \$CETBUILDTOOLS_DIR/templates/setup_for_development.template $inputdir/setup_for_development");
} else {
  $inputdir = File::Spec->catfile($sourcedir, "ups");
}

# See if any packages need to have CMake MODULE_LIBRARY plugins disabled:
my $no_module_plugins_products =
  { map
    { my $prod = $_;
      my $phash = $setup_products_hash->{$prod}->{phash};
      (exists $phash->{cetmodules} and
       exists $phash->{cetmodules}->{version} and
       version_cmp($min_cetm_module_plugins_version,
                   $phash->{cetmodules}->{version}) > 0) ? ($prod => 1): (); }
    keys %{$setup_products_hash}
  };

my $regular_products = reconcile_deps($setup_products_hash);
my $cetbuildtools_compat = (exists $regular_products->{cetbuildtools}) ? 1 : 0;

# Verify we have access to the cetmodules version we need.
if (exists $all_packages->{cetmodules}) {
  if (version_cmp($all_packages->{cetmodules}->{version}, "$min_cetm_version") > 0) {
    error_exit("cetmodules $all_packages->{cetmodules}->{version} checked out, but mrb ",
               "$ENV{MRB_VERSION} requires cetmodules >= $min_cetm_version.\n",
               "Update cetmodules in \$MRB_SOURCE or remove and use an ",
               "externally-installed cetmodules >= $min_cetm_version");
  } else {
    delete $regular_products->{cetmodules};
  }
} elsif (not exists $regular_products->{cetmodules} or
         version_cmp("$min_cetm_version",
                     latest_version(keys %{$regular_products->{cetmodules}}))
         > 0) {
  print STDERR "INFO: mrb $ENV{MRB_VERSION} requires cetmodules >= $min_cetm_version to run: attempting to configure...";
  my $cetmodules_version = find_at_least('cetmodules', $min_cetm_version);
  print STDERR "$cetmodules_version OK\n";
  $regular_products->{cetmodules}->{$cetmodules_version} =
    { version => $cetmodules_version,
      origin => "mrb",
      only_for_build => 1,
      qualspec => '' };
}

if (exists $all_packages->{cetbuildtools}) {
  error_exit("building with cetbuildtools checked out is not supported at this time");
} elsif ($cetbuildtools_compat) {
  # At least one package has requested cetbuildtools. Check whether the
  # latest of those requested versions matches our requirements.
  my $cetb_version =
    latest_version(keys %{$regular_products->{cetbuildtools}});
  if (version_cmp("$min_cetb_version", "$cetb_version") > 0) {
    print STDERR "INFO: mrb $ENV{MRB_VERSION} requires cetbuildtools >= $min_cetb_version if specified: attempting to configure...";
    $cetb_version = find_at_least('cetbuildtools', $min_cetb_version);
    print STDERR "$cetb_version OK\n";
    $regular_products->{cetbuildtools}->{$cetb_version} =
      { version => $cetb_version,
        origin => "mrb",
        only_for_build => 1,
        qualspec => '',
        setup_options => [qw(-j)] };
  } else {
    if (exists $regular_products->{cetbuildtools}->{$cetb_version}->{setup_options}) {
      push @{ $regular_products->{cetbuildtools}->{$cetb_version}->{setup_options} }, '-j';
    } else {
      $regular_products->{cetbuildtools}->{$cetb_version}->{setup_options} = ['-j'];
    }
  }
}

foreach my $prod (keys %{$regular_products}) {
  # Check for inconsistent dependency versions (we already checked for
  # inconsistent qualifiers) and collapse the hierarchy.
  if (scalar keys %{$regular_products->{$prod}} > 1 and
      not exists $setup_products_hash->{$prod}) {
    if ($prod =~ m&^cet(buildtools|modules)$&) {
      # This one is OK: choose the latest.
      my $latest = latest_version(keys %{$regular_products->{$prod}});
      delete @{$regular_products->{$prod}}
                 {grep { $_ ne $latest; } keys %{$regular_products->{$prod}}};
    } else {
      error_exit("inconsistent versions for dependency $prod:",
                 map { sprintf("\n  %s requires $prod %s",
                               $regular_products->{$prod}->{$_}->{origin}, $_); }
                 keys %{$regular_products->{$prod}});
    }
  }
  # Collapse the hierarchy.
  $regular_products->{$prod} =
    $regular_products->{$prod}->{(keys %{$regular_products->{$prod}})[0]};
}

# Handle checked-out products differently.
my $checked_out_products =
  { map { ($_ => (delete $regular_products->{$_}) ||
           { qualspec => $setup_products_hash->{$_}->{qualspec} }) }
    keys %{$setup_products_hash} };

my @all_prefixes = (get_CMakeLists_hash($sourcedir));

# Add auxiliary information to checked-out products:
map { my $pinfo = $all_packages->{$_};
      my $cop_info = $checked_out_products->{$_};
      get_derived_parent_data($pinfo,
                              File::Spec->catfile($sourcedir, $_),
                              $cop_info->{qualspec});
      push @all_prefixes, $pinfo->{project_variable_prefix};
      $cop_info->{compiler} =
        compiler_for_quals($pinfo->{qhash}->{compiler},
                           $checked_out_products->{$_}->{qualspec})
          if $pinfo->{qhash}->{compiler} && ! $pinfo->{noarch};
      $pinfo->{module_plugins} = 'FALSE'
        if (exists $no_module_plugins_products->{$_});
    } sort keys %$checked_out_products;

# Now, reduce the length of project_variable_prefix for each project.
my $shortest_prefixes = shortest_unique_prefix(@all_prefixes);
foreach my $pkg (keys %$checked_out_products) {
  my $pinfo = $all_packages->{$pkg};
  $pinfo->{project_variable_prefix} =
    $shortest_prefixes->{$pinfo->{project_variable_prefix}};
}

my $compiler = reconcile_compiler($checked_out_products);

print_dep_setup($regular_products, $tfh);
print $tfh <<'EOF';

##################
tnotnull SETUP_CETMODULES && unsetup cetmodules
tnotnull SETUP_CETBUILDTOOLS && unsetup -j cetbuildtools

# Save and clear UPS_OVERRIDE to avoid trouble.
tdefined UPS_OVERRIDE_SAFE && unsetenv_ UPS_OVERRIDE_SAFE
tdefined UPS_OVERRIDE && setenv UPS_OVERRIDE_SAFE "$UPS_OVERRIDE"
tdefined UPS_OVERRIDE && unsetenv_ UPS_OVERRIDE
EOF

# Set up cetbuildtools (with -j) first to avoid complaints about
# cetmodules mismatches.
foreach my $pkg qw(cetbuildtools cetmodules) {
  if (exists $regular_products->{$pkg}) {
    print_dep_setup_one("$pkg", $regular_products->{$pkg}, $tfh);
  }
}

print $tfh <<'EOF';

# Restore any previous value for UPS_OVERRIDE.
tdefined UPS_OVERRIDE_SAFE && setenv UPS_OVERRIDE "$UPS_OVERRIDE_SAFE"
tdefined UPS_OVERRIDE_SAFE && unsetenv_ UPS_OVERRIDE_SAFE
##################
EOF

if (my $old_build_dir = $ENV{OLD_MRB_BUILDDIR}) {
  print $tfh <<EOF;

setenv PATH `dropit -p \"\${PATH}\" '${old_build_dir}'`
tdefined LD_LIBRARY_PATH && setenv LD_LIBRARY_PATH `dropit -p \"\${LD_LIBRARY_PATH}\" '${old_build_dir}'`
tdefined DYLD_LIBRARY_PATH setenv DYLD_LIBRARY_PATH `dropit -p \"\${DYLD_LIBRARY_PATH}\" '${old_build_dir}'`
tdefined CET_PLUGIN_PATH setenv CET_PLUGIN_PATH `dropit -p \"\${CET_PLUGIN_PATH}\" '${old_build_dir}'`
tdefined ROOT_INCLUDE_PATH setenv CET_PLUGIN_PATH `dropit -p \"\${CET_PLUGIN_PATH}\" '${old_build_dir}'`
EOF
}

# Take a side-trip to re-order.
my $ordered_products =
  order_products($setup_products_hash, $checked_out_products);

# Now, take a moment to write the individual setup files for each
# checked-out package as required by the build.
my $oldcwd = getcwd();
my $json = JSON->new->relaxed([]);

foreach my $product (sort { $ordered_products->{$a}->{order} <=>
                              $ordered_products->{$b}->{order} }
                     keys %{$ordered_products}) {
  my $pkg_builddir = File::Spec->catfile($builddir, $product);
  make_path($pkg_builddir);
  chdir($pkg_builddir) or
    error_exit("unable to make and change directory to $pkg_builddir");
  my $product_info = $all_packages->{$product};
  my $dep_info =
    deps_for_quals($product_info->{pfile},
                   $product_info->{phash},
                   $product_info->{qhash},
                   $ordered_products->{$product}->{qualspec});
  classify_deps($product_info, $dep_info);
  # Needed by CMake to generate the table file.
  write_table_deps($product_info->{name}, $dep_info);
  write_table_frag($product_info->{name}, $product_info->{pfile});
  # Needed by buildtool to specify CMake arguments.
  $product_info->{cmake_args} = ups_to_cmake($product_info);
  my $reconstituted_args =
    reconstitute_cmake_args(project_preset_data(File::Spec->catfile($sourcedir, $product),
                                                $product_info->{cmake_args},
                                                { prefix => $product_info->{project_variable_prefix} },
                                                { json => $json } ));
  $reconstituted_args and scalar @{$reconstituted_args}
    and $product_info->{cmake_args} = $reconstituted_args;

  # Add some CMake arguments of our own, if appropriate.
  push @{$product_info->{cmake_args}},
    sprintf('-DCET_PV_%s_MODULE_PLUGINS=%s',
            $product_info->{project_variable_prefix},
            $product_info->{module_plugins})
    if defined $product_info->{module_plugins};

  # Needed by us to set up the development environment.
  my $product_uc = uc $product;
  error_exit("unable to ascertain version for product $product from ups/product_deps or CMakeLists.txt")
    if (not $product_info->{version});
  print $tfh <<EOF;

##################
# >> $product <<
##################

tdefined SETUP_${product_uc} && unsetup -j ${product}
setenv ${product_uc}_VERSION "$product_info->{version}"
setenv ${product_uc}_DIR "\${MRB_SOURCE}/${product}"
setenv CETPKG_BUILD "${builddir}/${product}"
setenv CETPKG_SOURCE "\$${product_uc}_DIR"
EOF
  print_dev_setup($product_info, $tfh);
}

chdir($oldcwd);

print $tfh <<EOF;

########################################################################
# Postamble

# Required environment.
setenv CETPKG_SOURCE "${sourcedir}"
setenv CETPKG_BUILD  "${builddir}"

# Ensure top-level CMakeLists.txt is current.
mrb uc >/dev/null; test "\$?" != 0 && \
  echo ERROR\:\ failure\ to\ freshen\ $sourcedir/CMakeLists.txt && \
  return 1 || true

# Ensure . is at the front of FHICL_FILE_PATH.
tdefined FHICL_FILE_PATH || set_ FHICL_FILE_PATH=''
setenv FHICL_FILE_PATH \`dropit -esf -p "\${FHICL_FILE_PATH}" '.'\`
EOF

# Close files.
close($tfh);

my @ordered_prod_list =
  sort { $ordered_products->{$a}->{order} <=>
           $ordered_products->{$b}->{order} }
  keys %{$ordered_products};

my $mrb_pi =
  { name => "${mrb_project}_MRB",
    source => $sourcedir,
    build => $builddir,
    ($build_type) ? (build_type => $build_type) : (),
    version => $mrb_project_version,
    qualspec => $mrb_quals,
    cmake_args => [ @{reconcile_cmake_args($all_packages, @ordered_prod_list)},
                    '-DWANT_UPS:BOOL=ON',
                    sprintf("-DCMAKE_BUILD_TYPE:STRING=%s", $build_type // q()) ]
  };

get_derived_parent_data($mrb_pi, $sourcedir, $mrb_quals);
$mrb_pi->{project_variable_prefix} =
  $shortest_prefixes->{$mrb_pi->{project_variable_prefix}};
push @{$mrb_pi->{cmake_args}},
  sprintf("-DCET_PV_PREFIX:STRING=%s",
          join(";", values %{$shortest_prefixes}));

# Write the top-level info file for buildtool.
cetpkg_info_file(%$mrb_pi);

# Finish.
print "$tmpfl\n";
exit 0;
