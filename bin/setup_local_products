# NO USER-SERVICEABLE PARTS BELOW.
#
# There should be as little as possible here,
# with most of the heavy lifting done by other small scripts
#
# When sourcing this file from a script, you may have to tell this
# source file where it is via the fw_db shell (or env) variable.
# I.e.:
#    set fw_db=/some/path; source /some/path/this_file
# or  fw_db=/some/path; . /some/path/this_file

# Note: All the following special tricks for $_ must continue
#       relaying the value to the next rule.  Be careful!
# Special trick to nail the value of $_ down in a variety of shells.
echo $_ >& /dev/null
# Special trick for tcsh which is one-off on the command history stack.
: $_
# Special trick to capture the value of $_ in zsh and bash
test $?shell$_ != 1$_ >& /dev/null && \
    dollar_underscore="$_" && \
    dollar_underscore=`expr "${dollar_underscore}" : ".\(.*\)"`
# Special trick to capture the value of $_ in tcsh
test $?shell = 1 && set dollar_underscore=`echo $_`

# Setup the shell independence functions and aliases.
source "${MRB_DIR}/bin/shell_independence"

test -z "${UPS_DIR}" && \
    echo "" && \
    echo "ERROR: You MUST setup ups" && \
    echo "" && \
    return

# make sure we know where this script lives
# now if we were passed a path or if not, we can figure it out (maybe if we are interactive)
#   bash, zsh, ksh and tcsh pass params to a source file, csh does not. but someone will be writing csh scripts
set_ db=
tnotnull fw_db && \
    set_ db=`sh -c "cd ${fw_db} > /dev/null 2>&1 && /bin/pwd"`

test -z "${db}" && tnotnull BASH_SOURCE && \
    set_ me=`dirname ${BASH_SOURCE}` && \
    set_ db=`sh -c "cd ${me} > /dev/null 2>&1 && /bin/pwd"`

# history is applicable only for interactive tcsh
test -z "${db}" -a "${ss}" = csh && test $?history = 0 && \
    set history=5  # make sure history 1 works, FIXME: This is not needed.
test -z "${db}" -a "${ss}" = csh && \
    set me=`history 1 | sed 's/^[ 	0-9:]*//'` && \
    test -n "${me}" && \
    set me=`dirname ${me[2]}` && \
    set db=`sh -c "cd ${me} > /dev/null 2>&1 && /bin/pwd"`

ifcsh_
else
    # Special trick for zsh.
    test -z "$db" && test "${shell%%*/}" = "zsh" && \
        db=${${(%):-%N}%/*}
# Warning, this must be here because the tcsh parser is brain-dead.
endif
endifcsh_

#echo This script lives in $db

test -z "${db}" && \
    echo "Please set shell or env. variable fw_db (to be the path to the framework source code). Fix this and other errors may go away."

test -n "$db" && \
    setenv CETPKG_SOURCE "${db}"

# make sure we know the current directory
tnotnull MRB_BUILDDIR  && \
    setenv CETPKG_BUILD "${MRB_BUILDDIR}"

test -z "${CETPKG_BUILD}" && \
    setenv CETPKG_BUILD "`/bin/pwd`"

tnotnull MRB_SOURCE && \
    setenv CETPKG_BUILD "${MRB_SOURCE}"

test -z "${CETPKG_SOURCE}" && \
    setenv CETPKG_SOURCE "`/bin/pwd`"

#echo The working build directory is $CETPKG_BUILD
#echo The source code directory is $CETPKG_SOURCE

# make sure we know the local product directory
test -z "${MRB_INSTALL}" && \
    echo "" && \
    echo "ERROR: MRB_INSTALL is not defined - please source localProducts_XXX/setup" && \
    echo "" && \
    unset db me && \
    return

echo local product directory is $MRB_INSTALL


# Remove build directory from FHICL_FILE_PATH
tnotnull FHICL_FILE_PATH && setenv FHICL_FILE_PATH `dropit -p $FHICL_FILE_PATH $MRB_BUILDDIR`

# Remove build directory from PATH
tnotnull PATH   && setenv PATH   `dropit -p $PATH   $MRB_BUILDDIR`

# Remove build area LIBRARY_PATH
tnotnull LD_LIBRARY_PATH   && setenv LD_LIBRARY_PATH   `dropit -p $LD_LIBRARY_PATH   $MRB_BUILDDIR`
tnotnull DYLD_LIBRARY_PATH && setenv DYLD_LIBRARY_PATH `dropit -p $DYLD_LIBRARY_PATH $MRB_BUILDDIR`

echo ----------- this block should be empty ------------------

ifcsh_
    # tcsh needs it this way
    source `${UPS_DIR}/bin/ups setup ${SETUP_UPS}`
else
    if [ "${ZSH_NAME}" ]
    then
        # zsh does word expansion differently
        . `${UPS_DIR}/bin/ups setup ${=SETUP_UPS}`
    else
        # bash likes it this way
        . `${UPS_DIR}/bin/ups setup ${SETUP_UPS}`
    fi
# Warning, this must be here because the tcsh parser is brain-dead.
endif
endifcsh_

setenv UPS_OVERRIDE -B
# Now run get_setup_list.sh to get the ups setup commands
# for the local products as a temporary script file.
set_ cmdfile=`$db/get_setup_list.sh $*`
# FIXME: Test for failure here.
chmod +x "${cmdfile}"
#echo Ready to source $cmdfile
set_ setup_fail=false
source "${cmdfile}"
#echo "$cmdfile returned $setup_fail"
test "$setup_fail" = "true" && \
    echo "ERROR: setup of required products has failed" && \
    unset db me cmdfile setup_fail && \
    return 1

echo ---------------------------------------------------------

# cleanup before exiting
rm -f "${cmdfile}"
unset db me cmdfile setup_fail

test "${mrb_exit}" = "true" -a "${is_sourced}" != "true" && exit ${mrb_status}
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" && \
    source "${MRB_DIR}/bin/unset_shell_independence" && \
    unset dollar_underscore dollar_zed base mrb_status usageMsg subcom 
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" -a $?shell = 1 &&\
    unset is_sourced mrb_exit && \
    exit
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" -a $?shell != 1 && \
    unset is_sourced mrb_exit && \
    return
