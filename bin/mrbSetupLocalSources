#----- Begin of mrbSetEnv ----
# NO USER-SERVICEABLE PARTS BELOW.
#
# There should be as little as possible here,
# with most of the heavy lifting done by other small scripts
#
# usage: source mrbSetLocalSources [optional extra qualifiers]

# Note: All the following special tricks for $_ must continue
#       relaying the value to the next rule.  Be careful!
# Special trick to nail the value of $_ down in a variety of shells.
echo $_ >& /dev/null
# Special trick for tcsh which is one-off on the command history stack.
: $_
# Special trick to capture the value of $_ in zsh and bash
test $?shell$_ != 1$_ >& /dev/null && \
    dollar_underscore="$_" && \
    dollar_underscore=`expr "${dollar_underscore}" : ".\(.*\)"`
# Special trick to capture the value of $_ in tcsh
test $?shell = 1 && set dollar_underscore=`echo $_`

# Setup the shell independence functions and aliases.
source "${MRB_DIR}/bin/shell_independence"

# Capture the value of $0
set_ dollar_zed=`echo "${0}" | sed -e 's/^-//'`

# Special tricks to figure out if this script has been sourced.
# Works for bash, tcsh, and in some cases for zsh.
set_ is_sourced=false
ifcsh_
    # Note: It is unfortunate that we must hard-code the name
    #       of this script here, but there is no other way
    #       that works, tcsh is brain-dead.
    set base=`basename "${dollar_zed}"`
    test "${base}" != "mrbSetEnv" && \
        set is_sourced=true
else
    # Special trick for zsh.
    test "${ZSH_NAME}" && test "${dollar_underscore}" = "${dollar_zed}" && \
        is_sourced=true
    # If there were arguments then there is no safe way to find out
    # whether or not the script was sourced in zsh.  Pretend it was.
    test "${ZSH_NAME}" && test "${#argv}" != "0" && \
        is_sourced=true
    # Special trick for bash.
    test "${BASH}" && test "${BASH_SOURCE}" != "${dollar_zed}" && \
        is_sourced=true
# Warning, this must be here because the tcsh parser is brain-dead.
endif
endifcsh_

set_ msg2='ERROR: you must source this script'
test "${is_sourced}" != "true" && echo "$msg2"
test "${is_sourced}" != "true" && unset msg2 && exit 1

#
#  End of boilerplate.  Begin of real work.
#

# Utility for getting exiting in error right
# in the case we have been sourced.
set_ mrb_exit=false
set_ mrb_status=0

# Make sure we have ups.
test -z "${UPS_DIR}" && \
    set_ mrb_exit=true && \
    set_ mrb_status=1 && \
    echo "ERROR: Please setup the ups product first!"

test "${mrb_exit}" = "true" -a "${is_sourced}" != "true" && exit ${mrb_status}
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" && \
    source "${MRB_DIR}/bin/unset_shell_independence" && \
    unset dollar_underscore dollar_zed base mrb_status usageMsg subcom 
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" -a $?shell = 1 &&\
    unset is_sourced mrb_exit && \
    exit
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" -a $?shell != 1 && \
    unset is_sourced mrb_exit && \
    return

setenv CETPKG_SOURCE $MRB_SOURCE

# make sure we know the build directory
setenv MRB_BUILDDIR `${MRB_DIR}/bin/checkBuildDir.sh`
tnotnull MRB_BUILDDIR  && setenv CETPKG_BUILD $MRB_BUILDDIR
test -z "$CETPKG_BUILD" && setenv CETPKG_BUILD `pwd`

echo The working build directory is $CETPKG_BUILD
echo The source code directory is $CETPKG_SOURCE

set_ msg5='ERROR: setup of required products has failed'

echo ----------- check this block for errors -----------------------

ifcsh_
    # tcsh needs it this way
    source `${UPS_DIR}/bin/ups setup ${SETUP_UPS}`
else
    if [ "${ZSH_NAME}" ]
    then
        # zsh does word expansion differently
        . `${UPS_DIR}/bin/ups setup ${=SETUP_UPS}`
    else
        # bash likes it this way
        . `${UPS_DIR}/bin/ups setup ${SETUP_UPS}`
    fi
# Warning, this must be here because the tcsh parser is brain-dead.
endif
endifcsh_

setenv UPS_OPTIONS -B
# now get the rest of the products
#set_ cmd="$MRB_DIR/bin/setup_products $CETPKG_SOURCE $CETPKG_BUILD $*"
#echo Ready to run $cmd
set_ setup_fail="false"
source `$MRB_DIR/bin/setup_products $CETPKG_SOURCE $CETPKG_BUILD $*`
#echo "$cmd returned $setup_fail"
test "$setup_fail" = "true" && echo "$msg5"
test "$setup_fail" = "true" && unset msg5 && unset setup_fail && return 1
# finally, create fake products for local packages
#set_ cmd="$MRB_DIR/bin/define_local $CETPKG_SOURCE $CETPKG_BUILD $*"
#echo Ready to run $cmd
set_ setup_fail="false"
source `$MRB_DIR/bin/define_local $CETPKG_SOURCE $CETPKG_BUILD $*`
#echo "$cmd returned $setup_fail"
test "$setup_fail" = "true" && echo "$msg5"
unset msg5
test "$setup_fail" = "true" && unset setup_fail && return 1
unset setup_fail
test -e "$CETPKG_BUILD/diag_report" && cat $CETPKG_BUILD/diag_report

echo ----------------------------------------------------------------
$MRB_DIR/bin/copy_dependency_database.sh ${MRB_SOURCE} ${MRB_INSTALL} dummy

set_ mrb_exit=true

test "${mrb_exit}" = "true" -a "${is_sourced}" != "true" && exit ${mrb_status}
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" && \
    source "${MRB_DIR}/bin/unset_shell_independence" && \
    unset dollar_underscore dollar_zed base mrb_status usageMsg subcom 
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" -a $?shell = 1 &&\
    unset is_sourced mrb_exit && \
    exit 0
test "${mrb_exit}" = "true" -a "${is_sourced}" = "true" -a $?shell != 1 && \
    unset is_sourced mrb_exit && \
    return 0

#----- End of mrbSetEnv ----
