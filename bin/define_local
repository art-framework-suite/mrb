#!/usr/bin/env perl
#
# setup products for the build environment
# use product_deps and qualifier_deps

# we need to know the qualifiers
# -d, -o, or -p and 1-2 other qualifiers

use File::Basename;
use lib dirname($0);


if( $#ARGV < 2 ) {
    $errfl1 = "problem_report";
    open(ERR1, "> $errfl1") or die "Couldn't open $errfl1";
    print ERR1 "\n";
    print ERR1 "unsetenv_ CETPKG_NAME\n";
    print ERR1 "unsetenv_ CETPKG_VERSION\n";
    print ERR1 "unsetenv_ CETPKG_QUAL\n";
    print ERR1 "unsetenv_ CETPKG_TYPE\n";
    print ERR1 "echo \"ERROR: directory and qualifiers not specified\"\n";
    print ERR1 "echo \"USAGE: setup_products <input-directory> <-d|-o|-p> <qualifiers>\"\n";
    print ERR1 "return 1\n";
    close(ERR1);
    print "$errfl1\n";
    exit 0;
}

$sourcedir = $ARGV[0];
$builddir = $ARGV[1];
$simple = "";
for $i ( 2 .. $#ARGV ) {
    if( $ARGV[$i] eq "-d" ) {
      $dop = "debug";
      $type = "Debug";
    } elsif( $ARGV[$i] eq "-o" ) {
      $dop = "opt";
      $type = "Opt";
    } elsif( $ARGV[$i] eq "-p" ) {
      $dop = "prof";
      $type = "Prof";
    } elsif( $ARGV[$i] eq "simple" ) {
      $simple = "true";
    } else {
      $incoming_qual = $incoming_qual.$ARGV[$i].":";
      $qdir = $qdir.$ARGV[$i]."-";
    }
}

# use this file for debugging
$diagfl = $builddir."/diag_report";
open(DIAG, ">> $diagfl") or die "Couldn't open $diagfl";

$inputdir = $sourcedir."/ups";

require mrb_parse_deps;

$mrb_project = $ENV{MRB_PROJECT};
$mrb_version = $ENV{MRB_PROJECT_VERSION};
$mrb_quals = $ENV{MRB_QUALS};
$tmpfl = $builddir."/".$mrb_project."-".$mrb_version."-defs";
##print DIAG "opening $tmpfl for $mrb_project $mrb_version\n";
open(TSET, "+> $tmpfl") or die "Couldn't open $tmpfl";

##print DIAG "setup_products debug info: cmakefile  is $cmakefile\n";

# parse a list of dependencies
$dfile = $sourcedir."/.dependency_list";
%deplist = get_dependency_list( $dfile, DIAG );

# have to find the list of packages to traverse
$cmakefile=$sourcedir."/CMakeLists.txt";
@package_list = get_package_list( $cmakefile, DIAG );
##print DIAG "DIAGNOSTICS: packages to check: @package_list\n";
if ( $#package_list < 0 ) {
  print DIAG "DIAGNOSTICS: there are no packages in $sourcedir\n";
  print DIAG "DIAGNOSTICS: nothing to build\n";
  print "$tmpfl\n";
  exit 0;
}
for $i ( 0 .. $#package_list ) {
  $pkg=$package_list[$i];
  $pfile=$sourcedir."/".$pkg."/ups/product_deps";
  ##print DIAG "checking $pfile for $pkg \n";
  ($productnames[$i], $productversn[$i]) = get_product_name( $pfile, DIAG );
  $productdefaultquals[$i] = find_default_qual( $pfile );
  #print DIAG "DIAGNOSTICS: $productdefaultquals[$i] for $productnames[$i]\n";
}

# unsetup if necessary
print TSET "# unsetup products we are building\n";
##print DIAG "DIAGNOSTICS: packages to check: @package_list\n";
for $i ( 0 .. $#package_list ) {
  # call unsetup if the $productnames[$i] has been setup
  $psetup = "SETUP_".uc($productnames[$i]);
  $is_setup=$ENV{$psetup};
  ##print DIAG "DIAGNOSTICS: $psetup for $productnames[$i] is $is_setup\n";
  if ( $is_setup ) {
    print TSET "unsetup -j $productnames[$i]\n";
  }
}

# loop again and define package variables
print TSET "# set package variables\n";
for $i ( 0 .. $#package_list ) {
  $pkg=$package_list[$i];
  $pfile=$sourcedir."/".$pkg."/ups/product_deps";
  ##print DIAG "checking $pfile for $pkg \n";
  $product = $productnames[$i];
  $version = $productversn[$i];
  $qual    = $productdefaultquals[$i]; 

  $fcl_directory = get_fcl_directory( $pfile, $product );
  # pretend this is a product
  $product_uc = uc($product);
  print TSET "setenv  ${product_uc}_VERSION $version\n";
  print TSET "setenv  ${product_uc}_FQ $qual\n";
  if ( $ENV{LD_LIBRARY_PATH} ne '' ) {
    # Below we want to remove the local products lib from the library path. The path is hard to find, since it is
    # product/version/lib and version is hard to predict. So we'll drop "$product/"  -- the final slash is important
    # as without it, dropit artg4 would also drop artg4examples and we don't want that.
    print TSET "setenv  LD_LIBRARY_PATH \`dropit -p \${LD_LIBRARY_PATH} \'${product}/\'\`\n";
    print TSET "setenv  DYLD_LIBRARY_PATH \`dropit -p \${DYLD_LIBRARY_PATH} \'${product}/\'\`\n";
  }
  print TSET "setenv  LD_LIBRARY_PATH $ENV{MRB_BUILDDIR}/${product}/lib:\${LD_LIBRARY_PATH}\n";
  print TSET "setenv  DYLD_LIBRARY_PATH $ENV{MRB_BUILDDIR}/${product}/lib:\${DYLD_LIBRARY_PATH}\n";
  if ( $fcl_dirctory ne "none" ) {
    if ( $ENV{FHICL_FILE_PATH} ne '' ) {
      print TSET "setenv  FHICL_FILE_PATH \`dropit -p \${FHICL_FILE_PATH} \'${fcl_directory}\'\`\n";
    }
    print TSET "setenv  FHICL_FILE_PATH $ENV{MRB_BUILDDIR}/${fcl_directory}:\${FHICL_FILE_PATH}\n";
  }

}

# cleanup
close(TSET);
close(DIAG);
print "$tmpfl\n";


exit 0;
