#!/usr/bin/env bash

# mrb is a convenient "umbrella" script used to dispatch other scripts to do development 
# releated tasks.

function run_buildtool()
{
   echo $MRB_BUILDDIR
   if [ -z $MRB_BUILDDIR ]; then
      echo "ERROR: MRB_BUILDDIR is undefined"
      exit 1
   fi 
   if [ ! -e $MRB_BUILDDIR/cetpkg_variable_report ]; then
      echo "ERROR: you must \"source mrb setEnv\" in $MRB_BUILDDIR"
      exit 2
   fi
   cd $MRB_BUILDDIR
   echo "calling buildtool $*"
   buildtool $*
}

# setEnv must be sourced in order to affect your environment
# setup_local_products must also be sourced
# This is not necessary for the other mrb commands.
# Did the user source this script?
isSourced=""
[[ ${BASH_SOURCE[0]} != "${0}" ]] && isSourced="yes"

# Get the directory where this script resides
thisDirAB=$(cd ${BASH_SOURCE[0]%/*} && echo $PWD/${BASH_SOURCE[0]##*/} )
export mrb_dir=`dirname $thisDirAB`

# Determine the name of this command
thisComFull=$(basename ${BASH_SOURCE[0]})
thisCom=${thisComFull%.*}

# Export this umbrella command name to subshells (should be mrb)
export mrb_command="$thisCom"

# Define the short list of commands
shortComList="(newDev | gitCheckout | svnCheckout | setEnv | build | install | setup_local_products | zapBuild | newProduct | updateDepsCM )"

# Simple help if no argumets
if [ $# -lt 1 ]
then
  echo "Usage ${mrb_command} $shortComList [-h for help]"
  echo "           ${mrb_command} -h   gives more information"

  [ $isSourced ] && return || exit 1
fi

# Get the desired sub-command
subcom=$1
shift

# Some sanity checks -

# Make sure we have ups
if [ -z ${UPS_DIR} ]
then
   echo "ERROR: please setup ups"
   exit 1
fi

# Make sure the @MRB_PROJECT@ product is setup
if [ -z ${MRB_PROJECT} ]
then
    echo "ERROR: MRB_PROJECT is not defined."
    echo "       Please set \${MRB_PROJECT} to the master product (e.g., larsoft, uboone, etc.)"
    exit 2
fi

# Determine how to dispatch
case "${subcom}" in

  # Give help if necessary (note the "here document":http://en.wikipedia.org/wiki/Here_document )
  "-h" | "--help" | "help" | "h" )
   cat 1>&2 << EOF
Usage ${mrb_command} $shortComList [-h for help]"
  
  Tools ( for help on tool, do "${mrb_command} <tool> -h" )

   newDev (n)                  Start a new development area
   gitCheckout (g)             Clone a git repository
   svnCheckout (svn)           Checkout from a svn repository
   setEnv (s)                  Setup a development enviornment
   build (b)                   Run buildtool
   install (i)                 Run buildtool
   setup_local_products (slp)  Setup all products installed in the working localProducts_XXX directory
   zapBuild (z)                Delete everything in your build area
   newProduct (p)              Create a new product from scratch
   updateDepsCM (uc)           Update CMakeLists.txt file for latest dependencies
EOF
   ;;

  # h3. The available commands 

   # Set up a new development area (calls &l=bin/newDev.sh&)
    "newDev" | "n"     ) ${mrb_dir}/newDev.sh $*
        ;;

   # Clone a Redmine git repository (calls &l=bin/gitCheckout.sh&)
    "gitCheckout" | "g" ) ${mrb_dir}/gitCheckout.sh $*
        ;;

   # Checkout from a Redmine svn repository (calls &l=bin/svnCheckout.sh&)
    "svnCheckout" | "svn" ) ${mrb_dir}/svnCheckout.sh $*
        ;;

   # Create a new product (calls &l=bin/newProduct.sh&)
    "newProduct" | "p" ) ${mrb_dir}/newProduct.sh $*
        ;; 

  # Set up a development environment (calls &l=bin/setEnv.sh&)
    "setEnv" | "s" )

      # Check that the user sourced the script
      if [ "$isSourced" = "yes" ]; then 
        source ${mrb_dir}/setEnv.sh $*
      else
        echo 'You must source to run setEnv'
        echo ' '
        ${mrb_dir}/setEnv.sh -H
        exit 5 
      fi
    ;;

  # Set up all products installed in the working localProducts_XXX
    "setup_local_products" | "slp" )

      # Check that the user sourced the script
      if [ "$isSourced" = "yes" ]; then 
        source ${mrb_dir}/setup_local_products
      else
        echo 'You must source to run setup_local_products'
        echo ' '
        exit 5 
      fi
    ;;

# Run buildtool 
    "build" | "b" ) run_buildtool -I $MRB_INSTALL -b $*
        ;;

   # install into local product area
    "install" | "i" ) run_buildtool -I $MRB_INSTALL -i $*
        ;;

   # Delete everything in this build area (safely) (calls &l=bin/zapBuild.sh&)
    "zapBuild" | "z" ) ${mrb_dir}/zapBuild.sh $*
        ;;

   # Update CMakeLists.txt for latest dependencies (calls &l=bin/updateDepsCM.sh&)
    "updateDepsCM" | "uc" ) ${mrb_dir}/updateDepsCM.sh $*
        ;;

   # Dump some debug information
   "debug" )
      echo "mrb_dir=${mrb_dir}"
      echo "umbCom=${mrb_command}"
      echo "isSourced=$isSourced"
      ;;

    *) echo "Unknown command ${subcom}"
       echo "Usage ${mrb_command} $shortComList [-h for help]"
        ;;

esac
