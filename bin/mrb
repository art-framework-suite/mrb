#!/usr/bin/env bash

# mrb is a convenient "umbrella" script used to dispatch other scripts to do development 
# releated tasks.

function run_buildtool()
{
   echo $MRB_BUILDDIR
   if [ -z $MRB_BUILDDIR ]; then
      echo "ERROR: MRB_BUILDDIR is undefined"
      [ $isSourced ] && return || exit 1
   fi 
   if [ ! -e $MRB_BUILDDIR/cetpkg_variable_report ]; then
      echo "ERROR: you must \"mrbsetenv\" (or \". mrb s\") in $MRB_BUILDDIR"
      [ $isSourced ] && return || exit 2
   fi
   cd $MRB_BUILDDIR
   echo "calling buildtool $*"
   buildtool $*
}

# setEnv must be sourced in order to affect your environment
# setup_local_products must also be sourced
# This is not necessary for the other mrb commands.
# We use the mrbsetenv and mrbslp aliases
isSourced=""
[[ ${BASH_SOURCE[0]} != "${0}" ]] && isSourced="yes"

# Get the directory where this script resides
if [ -z ${MRB_DIR} ]; then
   echo "ERROR: MRB_DIR is undefined"
   echo "       Please setup mrb"
  [ $isSourced ] && return || exit 1
fi 
mrb_bin=${MRB_DIR}/bin

# Export this umbrella command name to subshells (should be mrb)
export mrb_command=${mrb_bin}/mrb

# Simple help if no argumets
if [ $# -lt 1 ]
then
  echo "           ${mrb_command} -h gives help information"
  [ $isSourced ] && return || exit 1
fi

# Get the desired sub-command
subcom=$1
shift

# Some sanity checks -

# Make sure we have ups
if [ -z ${UPS_DIR} ]
then
   echo "ERROR: please setup ups"
  [ $isSourced ] && return || exit 1
fi

# Make sure the @MRB_PROJECT@ product is setup
if [ -z ${MRB_PROJECT} ]
then
    echo "ERROR: MRB_PROJECT is not defined."
    echo "       Please set \${MRB_PROJECT} to the master product (e.g., larsoft, uboone, etc.)"
  [ $isSourced ] && return || exit 2
fi

# Determine how to dispatch
case "${subcom}" in

  # Give help if necessary (note the "here document":http://en.wikipedia.org/wiki/Here_document )
  "-h" | "--help" | "help" | "h" )
   cat 1>&2 << EOF
Usage ${mrb_command} $shortComList [-h for help]"
  
  Tools ( for help on tool, do "${mrb_command} <tool> -h" )

	newDev (n)                  Start a new development area
	gitCheckout (g)             Clone a git repository
	svnCheckout (svn)           Checkout from a svn repository
	setEnv (s)                  Setup development environment (mrbSetEnv)
	build (b)                   Run buildtool
	install (i)                 Run buildtool with install
	test (t)                    Run buildtool with tests
  superbuild (sb)             Run superbuild on the Jenkins buildmaster
	setup_local_products (slp)  Setup local products (mrbslp) [not local sources]
	zapBuild (z)                Delete everything in your build area
	newProduct (p)              Create a new product from scratch
	changelog (c)               Display a changelog for a package
	bumpVersion (bv)            Bump version number of a package
	updateDeps (ud)             Update dependencies in CMakeLists.txt and product_deps
	updateCM (uc)               Update the master CMakeLists.txt file
  updateLocalProdDeps (ulpd)  Update dependencies in product_deps to reflect local products
	makeDeps (md)               Build or update a header level dependency list
	checkDeps (cd)              Check for missing build packages
	pullDeps (pd)               Pull missing build packages into MRB_SOURCE

  Aliases ( we use aliases for these commands because they must be sourced )

   mrbsetenv                   Setup a development enviornment and local products  [use this more often]
                               (source \$MRB_DIR/bin/mrbSetEnv)

   mrbslp                      Setup only the products installed in the working localProducts_XXX directory
                               (source \$MRB_DIR/bin/setup_local_products)

EOF
   ;;

  # h3. The available commands 

   # Set up a new development area (calls &l=bin/newDev.sh&)
    "newDev" | "n"     ) ${mrb_bin}/newDev.sh $*
        ;;

   # Clone a Redmine git repository (calls &l=bin/gitCheckout.sh&)
    "gitCheckout" | "g" ) ${mrb_bin}/gitCheckout.sh $*
        ;;

   # Checkout from a Redmine svn repository (calls &l=bin/svnCheckout.sh&)
    "svnCheckout" | "svn" ) ${mrb_bin}/svnCheckout.sh $*
        ;;

   # Create a new product (calls &l=bin/newProduct.sh&)
    "newProduct" | "p" ) ${mrb_bin}/newProduct.sh $*
        ;; 

  # Set up a development environment (calls &l=bin/mrbSetEnv&)
    "setEnv" | "s" )

		if [[ $isSourced != "yes" ]]
		then
			echo 'You must "source mrb setEnv"'
			exit 5
		fi
		source ${mrb_bin}/mrbSetEnv
    	[ $isSourced ] && return || exit 5
    ;;
  # Set up only sources  (calls &l=bin/mrbSetupLocalSources&)
    "setup_local_sources" )

		if [[ $isSourced != "yes" ]]
		then
			echo 'You must "source mrb setup_local_sources"'
			exit 5
		fi
                # We have to deal with the insanity of the current cetpkgsupport
                unsetup cetpkgsupport
		source ${mrb_bin}/mrbSetupLocalSources
                setup cetpkgsupport v1_07_01
    	[ $isSourced ] && return || exit 5
    ;;

  # Set up all products installed in the working localProducts_XXX
    "setup_local_products" | "slp" )

		if [[ $isSourced != "yes" ]]
		then
			echo 'You must "source mrb setEnv"'
			exit 5
		fi
                # We have to deal with the insanity of the current cetpkgsupport
                unsetup cetpkgsupport
		source ${mrb_bin}/setup_local_products
    	[ $isSourced ] && return || exit 5
            ;;

   # Run buildtool 
    "build" | "b" ) run_buildtool -I $MRB_INSTALL -b $*
        ;;

   # install into local product area
    "install" | "i" ) run_buildtool -I $MRB_INSTALL -i $*
        ;;

   # Run tests
    "test" | "t" ) run_buildtool -I $MRB_INSTALL -b -t $*
        ;;

   # Run superbuild
    "superbuild" | "sb" ) ${mrb_bin}/superbuild $*

   # Delete everything in this build area (safely) (calls &l=bin/zapBuild.sh&)
    "zapBuild" | "z" ) ${mrb_bin}/zapBuild.sh $*
        ;;

   # Display a git log
    "changelog" | "c" ) 
      if [ -d .git ]
      then
        git log --decorate --pretty=format:"%ad %ae %h%d %s" --date=short
      else
        echo "changelog: this is not a git repository"
      fi
       ;;  

   # Update CMakeLists.txt for latest dependencies (calls &l=bin/updateDepsCM.sh&)
    "updateCM" | "uc" ) ${mrb_bin}/updateDepsCM.sh $*
        ;;

   # Bump the version number for package (calls &l=bin/bumpVersion.sh&)
    "bumpVersion" | "bv" ) ${mrb_bin}/bumpVersion.sh $*
        ;;

   # Update product_deps and CMakeLists.txt to latest dependencies (calls &l=bin/updateDeps.sh&)
    "updateDeps" | "ud" ) ${mrb_bin}/updateDeps.sh $*
        ;;

   # Update product_deps to reflect local_products (calls &l=bin/updateProdDeps.sh&)
    "updateLocalProdDeps" | "ulpd" ) ${mrb_bin}/updateProdDeps.sh $*
        ;;

   # build the dependency database (.product_dependency)
    "makeDeps" | "md" ) ${mrb_bin}/makeDep.py $*
        ;;

   # check for missing build packages
    "checkDeps" | "cd" ) ${mrb_bin}/pullDep.py -n $*
        ;;

   # pull missing build packages
    "pullDeps" | "pd" ) ${mrb_bin}/pullDep.py $*
        ;;

   # Dump some debug information
   "debug" )
      echo "mrb_bin=${mrb_bin}"
      echo "umbCom=${mrb_command}"
      ;;

    *) echo "Unknown command ${subcom}"
       echo "Usage ${mrb_command} $shortComList [-h for help]"
        ;;

esac
