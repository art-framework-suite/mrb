#!/usr/bin/env perl
#
# setup products for the build environment
# use product_deps and qualifier_deps

# we need to know the qualifiers
# -d, -o, or -p and 1-2 other qualifiers

use File::Basename;
use lib dirname($0);


if( $#ARGV < 2 ) {
    $errfl1 = "problem_report";
    open(ERR1, "> $errfl1") or die "Couldn't open $errfl1";
    print ERR1 "\n";
    print ERR1 "unsetenv_ CETPKG_NAME\n";
    print ERR1 "unsetenv_ CETPKG_VERSION\n";
    print ERR1 "unsetenv_ CETPKG_QUAL\n";
    print ERR1 "unsetenv_ CETPKG_TYPE\n";
    print ERR1 "echo \"ERROR: directory and qualifiers not specified\"\n";
    print ERR1 "echo \"USAGE: setup_products <input-directory> <-d|-o|-p> <qualifiers>\"\n";
    print ERR1 "return 1\n";
    close(ERR1);
    print "$errfl1\n";
    exit 0;
}

$sourcedir = $ARGV[0];
$builddir = $ARGV[1];
$simple = "";
for $i ( 2 .. $#ARGV ) {
    if( $ARGV[$i] eq "-d" ) {
      $dop = "debug";
      $type = "Debug";
    } elsif( $ARGV[$i] eq "-o" ) {
      $dop = "opt";
      $type = "Opt";
    } elsif( $ARGV[$i] eq "-p" ) {
      $dop = "prof";
      $type = "Prof";
    } elsif( $ARGV[$i] eq "simple" ) {
      $simple = "true";
    } else {
      $incoming_qual = $incoming_qual.$ARGV[$i].":";
      $qdir = $qdir.$ARGV[$i]."-";
    }
}

# use this file for debugging
$diagfl = $builddir."/diag_report";
open(DIAG, "+> $diagfl") or die "Couldn't open $diagfl";

$srcbase = basename($sourcedir);
if ( $srcbase eq "ups" ) {
    $inputdir = $sourcedir;
    ##print DIAG "setup_products debug info: have the old setup_for_development\n";
    $errfl2 = "problem_report";
    open(ERR2, "> $errfl2") or die "Couldn't open $errfl2";
    print ERR2 "\n";
    print ERR2 "unsetenv_ CETPKG_NAME\n";
    print ERR2 "unsetenv_ CETPKG_VERSION\n";
    print ERR2 "unsetenv_ CETPKG_QUAL\n";
    print ERR2 "unsetenv_ CETPKG_TYPE\n";
    print ERR2 "echo \"ERROR: \"\n";
    print ERR2 "echo \"ERROR: you have an old copy of setup_for_development\"\n";
    print ERR2 "echo \"ERROR: please issue the following command\"\n";
    print ERR2 "echo \"ERROR: cp \$CETBUILDTOOLS_DIR/templates/setup_for_development.template $inputdir/setup_for_development\"\n";
    print ERR2 "echo \"ERROR: \"\n";
    print ERR2 "return 1\n";
    close(ERR2);
    print "$errfl2\n";
    exit 0;
} else {
    $inputdir = $sourcedir."/ups";
}
##print DIAG "setup_products debug info: source dir is $sourcedir\n";
##print DIAG "setup_products: incoming qual is $incoming_qual\n";

require mrb_parse_deps;

$mrb_project = $ENV{MRB_PROJECT};
$mrb_version = $ENV{MRB_PROJECT_VERSION};
$mrb_quals = $ENV{MRB_QUALS};
$tmpfl = $builddir."/".$mrb_project."-".$mrb_version;
##print DIAG "opening $tmpfl for $mrb_project $mrb_version\n";
open(TSET, "+> $tmpfl") or die "Couldn't open $tmpfl";

##print DIAG "setup_products debug info: cmakefile  is $cmakefile\n";
print TSET "setenv UPS_OVERRIDE -B\n";
print TSET "setenv CETPKG_NAME $mrb_project\n";
print TSET "setenv CETPKG_VERSION $mrb_version\n";
if ( $simple ) {
  print TSET "unsetenv_ CETPKG_QUAL\n";
  print TSET "unsetenv_ CETPKG_TYPE\n";
} else {
  print TSET "setenv CETPKG_QUAL $mrb_quals\n";
  print TSET "setenv CETPKG_TYPE $type\n";
}

# parse a list of dependencies
$dfile = $sourcedir."/.dependency_list";
%deplist = get_dependency_list( $dfile, DIAG );

# have to find the list of packages to traverse
$cmakefile=$sourcedir."/CMakeLists.txt";
@package_list = get_package_list( $cmakefile, DIAG );
##print DIAG "DIAGNOSTICS: packages to check: $#package_list @package_list\n";
if ( $#package_list < 0 ) {
  print DIAG "DIAGNOSTICS: there are no packages in $sourcedir\n";
  print DIAG "DIAGNOSTICS: nothing to build\n";
  print "$tmpfl\n";
  exit 0;
}
$use_cetbver="v0_00_00";
for $i ( 0 .. $#package_list ) {
  $pkg=$package_list[$i];
  $pfile=$sourcedir."/".$pkg."/ups/product_deps";
  ##print DIAG "checking $pfile for $pkg \n";
  ($productnames[$i], $productversn[$i]) = get_product_name( $pfile, DIAG );
  $cetbver[$i] = find_cetbuildtools( $pfile );
  ##print DIAG "DIAGNOSTICS: cetbuildtools $cetbver[$i]\n";
  $use_cetbver = compare_versions( $use_cetbver, $cetbver[$i] );
}
print TSET "setup -B cetbuildtools $use_cetbver\n";
print TSET "test \"\$?\" = 0 || set_ setup_fail=\"true\"\n"; 
print TSET "setup -B cetpkgsupport \n";
print TSET "test \"\$?\" = 0 || set_ setup_fail=\"true\"\n"; 
# now check for an old build directory 
$old_build_dir=$ENV{OLD_MRB_BUILDDIR};
if ( $old_build_dir ) {
   ##print DIAG "DIAGNOSTICS: found old build directory $old_build_dir\n";
  print TSET "setenv  LD_LIBRARY_PATH \`dropit -p \${LD_LIBRARY_PATH} \'${old_build_dir}\'`\n";
  print TSET "setenv  DYLD_LIBRARY_PATH \`dropit -p \${DYLD_LIBRARY_PATH} \'${old_build_dir}\'\`\n";
}
##print DIAG "DIAGNOSTICS: product name $#productnames @productnames\n";
##print DIAG "DIAGNOSTICS: product version $#productversn @productversn\n";
print TSET "# setup package dependencies\n";
for $i ( 0 .. $#package_list ) {
  $pkg=$package_list[$i];
  $pkgdir = $builddir."/".$pkg;
  unless ( -e $pkgdir or mkdir $pkgdir ) { die "Couldn't create $pkgdir"; }
  $pfile=$sourcedir."/".$pkg."/ups/product_deps";
  #print DIAG "checking $pfile for $pkg \n";
  #print DIAG "calling product_setup_loop with $pfile, $pkgdir\n";
  ($product, $version) = product_setup_loop( $pfile, $pkgdir, $incoming_qual, DIAG, TSET );

  if ( $product ne $productnames[$i] ) {
     print DIAG "ERROR: product names do not match: $product vs $productnames[$i]\n";
     exit 1;
  }
  if ( $version ne $productversn[$i] ) {
     print DIAG "ERROR: version names do not match: $version vs $productversn[$i]\n";
     exit 1;
  }
}

$cetfl = cetpkg_info_file( $mrb_project, $mrb_version, $mrb_version, $mrb_quals, $type, $sourcedir, $builddir );

# cleanup
close(TSET);
close(DIAG);
print "$tmpfl\n";


exit 0;
