# NO USER-SERVICEABLE PARTS BELOW.
#
# There should be as little as possible here,
# with most of the heavy lifting done by other small scripts
#
# When sourcing this file from a script, you may have to tell this
# source file where it is via the fw_db shell (or env) variable.
# I.e.:
#    set fw_db=/some/path; source /some/path/this_file
# or  fw_db=/some/path; . /some/path/this_file

test $?shell = 1 && set ss=csh || ss=sh
#echo Shell type is $ss.

# make some things similar. need to use set_ because sh builtin set would hide function set
# Note: perhaps the trickiest thing in this file is the sh set_ function tries to return the same status
#       as at the start of the function (which most likely is the result of a back-tick expression
test "$ss" = csh && alias set_ set && alias vecho_ 'if ($?vv == 1) echo \!*' || eval 'vecho_() { test -n "${vv-}" && echo "$@"; return 0; }'
test "$ss" =  sh && eval 'set_() { sts=$?;for xx in "$@";do var=`expr "$xx" : "\([^=]*\)"`;val=`expr "$xx" : "[^=]*=\(.*\)"`;eval "$var=\"$val\"";done;return $sts; }'
test "$ss" =  sh && eval 'setenv() { export $1;eval "$1=\"\${2-}\""; }; source() { file=$1; shift; . $file "$@"; }; unsetenv_() { unset "$@"; }'
test "$ss" =  sh && eval 'tnotnull() { eval "test -n \"\${$1-}\""; }'                             && eval 'nullout() { "$@" >/dev/null 2>&1; }'
test "$ss" = csh && alias tnotnull "eval '"'test $?'"\!* -eq 1' && eval '"'test -n "$'"\!*"'"'"'" && alias nullout "\!* >& /dev/null" && alias unsetenv_ unsetenv
test "$ss" = csh && alias return exit

set_ msg1='ERROR: You MUST setup ups'
test -z $UPS_DIR && ( echo ""; echo "$msg1"; echo "" ) && return

set_ msg3='ERROR: You MUST specify either -o, -p, or -d'
set_ msg4='Usage: setEnv <-d|-o|-p> <qualifier list>'
test -z "$1" && ( echo ""; echo "$msg4"; echo "$msg3"; echo "" ) && return

setenv CETPKG_SOURCE $MRB_SOURCE

# make sure we know the current directory
tnotnull MRB_BUILDDIR  && setenv CETPKG_BUILD $MRB_BUILDDIR
test -z "$CETPKG_BUILD" && setenv CETPKG_BUILD `pwd`
#echo Build directory is $CETPKG_BUILD

echo The working build directory is $CETPKG_BUILD
echo The source code directory is $CETPKG_SOURCE

set_ msg5='ERROR: setup of required products has failed'

echo ----------- check this block for errors -----------------------
setenv UPS_OPTIONS -B
# now get the rest of the products
set_ cmd="$MRB_DIR/bin/setup_products $CETPKG_SOURCE $CETPKG_BUILD $*"
#echo Ready to run $cmd
source `$MRB_DIR/bin/setup_products $CETPKG_SOURCE $CETPKG_BUILD $*`
#echo "$cmd returned $setup_fail"
test "$setup_fail" = "true" && echo "$msg5"
test "$setup_fail" = "true" && unset setup_fail && return 1
# finally, create fake products for local packages
set_ cmd="$MRB_DIR/bin/define_local $CETPKG_SOURCE $CETPKG_BUILD $*"
#echo Ready to run $cmd
source `$MRB_DIR/bin/define_local $CETPKG_SOURCE $CETPKG_BUILD $*`
#echo "$cmd returned $setup_fail"
test "$setup_fail" = "true" && echo "$msg5"
test "$setup_fail" = "true" && unset setup_fail && return 1
test -e "$CETPKG_BUILD/diag_report" && cat $CETPKG_BUILD/diag_report

echo ----------------------------------------------------------------

# cleanup before exiting
test "$ss" = csh && unalias tnotnull nullout set_ vecho_ return
unset ss db me thisdir msg1 msg2 msg3 msg4 msg5 setup_fail
unset set_ setenv unsetenv_ tnotnull nullout vecho_
