#

test $?shell = 1 && set ss=csh || ss=sh
#echo Shell type is $ss.

# make some things similar. need to use set_ because sh builtin set would hide function set
# Note: perhaps the trickiest thing in this file is the sh set_ function tries to return the same status
#       as at the start of the function (which most likely is the result of a back-tick expression
test "$ss" = csh && alias set_ set && alias vecho_ 'if ($?vv == 1) echo \!*' || eval 'vecho_() { test -n "${vv-}" && echo "$@"; return 0; }'
test "$ss" =  sh && eval 'set_() { sts=$?;for xx in "$@";do var=`expr "$xx" : "\([^=]*\)"`;val=`expr "$xx" : "[^=]*=\(.*\)"`;eval "$var=\"$val\"";done;return $sts; }'
test "$ss" =  sh && eval 'setenv() { export $1;eval "$1=\"\${2-}\""; }; source() { file=$1; shift; . $file "$@"; }; unsetenv_() { unset "$@"; }'
test "$ss" =  sh && eval 'tnotnull() { eval "test -n \"\${$1-}\""; }'                             && eval 'nullout() { "$@" >/dev/null 2>&1; }'
test "$ss" = csh && alias tnotnull "eval '"'test $?'"\!* -eq 1' && eval '"'test -n "$'"\!*"'"'"'" && alias nullout "\!* >& /dev/null" && alias unsetenv_ unsetenv
test "$ss" = csh && alias return exit

set_ msg1='ERROR: You MUST setup ups'

tnotnull UPS_DIR || ( echo ""; echo "$msg1"; echo "" )
tnotnull UPS_DIR || return

# Try to setup mrb (a bootstrap one that has get_os_platform - may be overriden by setup gm2)
setup mrb v0_07_00_gm2

tnotnull MRB_DIR || ( echo ""; echo "ERROR: You must first run the setup script for a standard release area" )
tnotnull MRB_DIR || ( echo "   e.g. On gm2gpvm first do 'source /cvmfs/gm2cfs.fnal.gov/prod/g-2/setup'"; echo "";)
tnotnull MRB_DIR || return

# make sure we know where this script lives
# now if we were passed a path or if not, we can figure it out (maybe if we are interactive)
#   bash, zsh, ksh and tcsh pass params to a source file, csh does not. but someone will be writing csh scripts
set_ msg2='Please set shell or env. variable fw_db (to be the path to the framework source code). Fix this and other errors may go away.'
tnotnull fw_db && set_ db=`sh -c "cd $fw_db >/dev/null 2>&1 && pwd"` && vecho_ 'setting db from fw_db variable' || set_ db=

test -z "$db" && tnotnull BASH_SOURCE && set_ me=`dirname $BASH_SOURCE` && set_ db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via BASH_SOURCE'

# history is applicable only for interactive t/csh
test -z "$db" -a "$ss" = csh && test $?history = 0 && set history=5  # make sure history 1 works
test -z "$db" -a "$ss" = csh && set me=`history 1|sed 's/^[     0-9:]*//'` && test -n "$me" && set me=`dirname $me[2]` \
    && set db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via interactive history'
#echo This script lives in $db

test -z "$db" && echo "$msg2" || vecho_ "db=$db"
test -n "$db" && setenv MRB_TOP `dirname $db`

#echo The local product directory is $db
#echo The top directory is $MRB_TOP

test -n $MRB_BUILDDIR && setenv OLD_MRB_BUILDDIR $MRB_BUILDDIR

setenv MRB_INSTALL $db

# Determine default build directory
set_ flav=`${MRB_DIR}/bin/get_os_platform`
set_ buildDirName="build_${flav}"
setenv MRB_BUILDDIR $MRB_TOP/${buildDirName}

